name: "CI"

on:
  pull_request:
    types: 
      - opened
      - synchronize
      - reopened
      - ready_for_review
  push:
    branches:
      - main
  workflow_dispatch:

permissions: read-all

jobs:
  build:
    strategy:
      matrix:
        build_type: [Release]
        os: [windows-2022, ubuntu-22.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install build deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y git ninja-build cmake python3 pkg-config \
                                  build-essential curl

      - name: Install LLVM toolchain (Linux)
        if: runner.os == 'Linux'
        env: { LLVM_VERSION: 18 }
        run: |
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-$LLVM_VERSION main" | sudo tee /etc/apt/sources.list.d/llvm.list
          curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y clang-$LLVM_VERSION lld-$LLVM_VERSION
          echo "CC=clang-$LLVM_VERSION"  >> $GITHUB_ENV
          echo "CXX=clang++-$LLVM_VERSION" >> $GITHUB_ENV

      - name: Build & install libc++ from source (Linux)
        if: runner.os == 'Linux'
        env:
          PREFIX: /usr/local/libcxx 
          LLVM_VER: llvmorg-18.1.8
        run: |
          set -eux
          git clone --depth 1 --branch $LLVM_VER https://github.com/llvm/llvm-project.git
          cmake -S llvm-project/runtimes -B build-libcxx -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi" \
            -DLIBCXX_ENABLE_SHARED=ON \
            -DLIBCXX_ENABLE_STATIC=ON \
            -DLIBCXXABI_ENABLE_SHARED=ON \
            -DLIBCXXABI_ENABLE_STATIC=ON \
            -DLIBCXX_ENABLE_EXPERIMENTAL=OFF \
            -DLIBCXX_ENABLE_FILESYSTEM=ON \
            -DLIBCXXABI_USE_COMPILER_RT=OFF \
            -DLIBCXX_USE_COMPILER_RT=OFF
          cmake --build build-libcxx --target install
          echo "LIBCXX_PREFIX=$PREFIX" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Set up MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with: { arch: x86_64 }

      - name: Set up CMake & Ninja
        uses: lukka/get-cmake@latest

      - name: Configure
        run: >
          cmake
          -S .
          -B build/${{ matrix.build_type }}
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          ${{ runner.os == 'Linux' && format('-DCMAKE_C_COMPILER={0}', env.CC) || '' }}
          ${{ runner.os == 'Linux' && format('-DCMAKE_CXX_COMPILER={0}', env.CXX) || '' }}
          ${{ runner.os == 'Linux' && '-DCMAKE_CXX_FLAGS=-stdlib=libc++' || '' }}
          ${{ runner.os == 'Linux' && '-DCMAKE_EXE_LINKER_FLAGS=-stdlib=libc++ -fuse-ld=lld' || '' }}
          ${{ runner.os == 'Linux' && '-DCMAKE_SHARED_LINKER_FLAGS=-stdlib=libc++ -fuse-ld=lld' || '' }}
          ${{ runner.os == 'Linux' && format('-DCMAKE_PREFIX_PATH={0}', env.LIBCXX_PREFIX) || '' }}
          ${{ runner.os == 'Linux' && format('-DCMAKE_INSTALL_RPATH={0}/lib', env.LIBCXX_PREFIX) || '' }}

      - name: Build
        run: cmake --build build/${{ matrix.build_type }} --parallel

      - name: Run tests
        run: ctest --test-dir build/${{ matrix.build_type }} --output-on-failure
